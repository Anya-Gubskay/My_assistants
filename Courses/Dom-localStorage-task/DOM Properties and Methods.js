/***************************
  ПОИСК ЭЛЕМЕНТОВ В ДЕРЕВЕ
***************************/

// Возвращает один элемент
// Поиск возможен только у document
document.getElementById('red');

// Возвращают коллекции элементов
// Поиск возможен и для ранее найденных элементов
var block = document.getElementsByClassName('block')[0];
var paragraphs = block.getElementsByTagName('p');

// Первый метод возвращает коллекцию элементов
// Второй метод возвращает только один элемент - первый, подходящий под селектор
// Поиск возможен и для ранее найденных элементов
// Селектор записывается уже с . и #, стоит использовать составные селекторы только по тегу, классу и id (без псевдоселекторов)
// Эти методы работают дольше, чем getElement(s)By*
document.querySelectorAll('div.block#red');
document.querySelector('div.block#red');
/********************************
    РАБОТА С ДЕРЕВОМ ЭЛЕМЕНТОВ
 ********************************/
// Возвращает ссылку на самый первый из дочерних элементов
var blockСhild =  block.firstChild;
// Возвращает ссылку на самый последний из дочерних элементов
var blockСhild =  block.lastChild;
//Возвращает массив из всех дочерних тегов
var blockСhild =  block.children;
//Возвращает ссылку на родительский элемент
var blockСhild =  block.parentNode;
//Проверяет наличие атрибута
var blockСhild = block.hasAttribute(name);
//Получает значение атрибута
var blockСhild=block.getAttribute(name);
//Устанавливает атрибут
var blockСhild=block.setAttribute(name, value);
//удаляет атрибут
var blockСhild=block.removeAttribute(name);
// возвращает true/false, в зависимости от того, есть ли у элемента класс class.
elem.classList.contains("class");
// добавляет/удаляет класс class
elem.classList.add/remove("class");
// если класса class нет, добавляет его, если есть
elem.classList.toggle("class");

/********************************
  МАНИПУЛЯЦИЯ ЭЛЕМЕНТАМИ ДЕРЕВА
********************************/

// Создает новый тег "в вакууме", в памяти. У него пока нет ни родителя, ни детей, ни содержимого
// Возвращает этот новый элемент
var newParagraph = document.createElement('p');

// Вставляет элемент в конец списка дочерних элементов у block
// Возвращает вставленный элемент
block.appendChild(newParagraph);

// Вставляет элемент перед каким-нибудь имеющимся дочерним элементом у block
// Возвращает вставленный элемент
block.insertBefore(newParagraph, paragraphs[1]);

// Заменяет имеющийся дочерний элемент у block на новый
// Возвращает замененный (удаленный) элемент - paragraphs[1]
block.replaceChild(newParagraph, paragraphs[1]);

// Удаляет имеющийся дочерний элемент из списка детей block
// Удалённый элемент продолжает существовать в памяти, но уже не является дочерним для block
// Возвращает удаленный элемент
var removedEl = block.removeChild(paragraphs[1]);

// Клонирует элемент, копия не привязывается к родителю block
// Если параметр выставлен в true - клонируются также и дочерние элементы
var clonedEl = newParagraph.cloneNode(true);

// (!!!) Результат выполнения всех вышеперечисленных методов может или местами даже должен быть записан в переменную для
// дальнейшего манипулирования элементами

/****************************************
 УПРАВЛЕНИЕ СОДЕРЖИМЫМ ЭЛЕМЕНТОВ ДЕРЕВА
 ***************************************/

// Возвращает полную html-содержимое block с текстом
// Как правило, сохраняется в переменную для дальнейшего манипулирования
block.innerHTML;

// Устанавливает html-содержимое (передающееся в виде строки !) в block
// При этом перезаписывается всё предыдущее содержимое block
block.innerHTML = '<span>Привет</span>';

// Добавляет в конец имеющейся разметки новую
block.innerHTML += '<span>Привет</span>';

// Возвращает текстовое содержимое block
// Как правило, сохраняется в переменную для дальнейшего манипулирования
// Если у block есть дочерние элементы - возвращается текстовое содержимое block и дочерних элементов
block.textContent;

// Устанавливает новый текст в block
// При этом перезаписывается всё предыдущее html и текстовое содержимое block
block.textContent = 'Привет';

// Добавляет в конец имеющегося текста новый
// Стоит применять лишь тогда, когда работаем с текстовым содержимым одного тега и дочерних у него нет
block.textContent += 'Привет';

// Возвращает значение полей формы
// Как правило, сохраняется в переменную для дальнейшего манипулирования
// Чаще всего применяется для input, textarea
input.value;

// Устанавливает значение полям формы
// При этом перезаписывается предыдущее значение
input.value = 'Привет';

// Добавляет значение в конец имеющегося
input.value += 'Привет';